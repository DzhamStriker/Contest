#include <algorithm>
#include <iostream>
#include <iomanip>
#include <string>
#include <vector>

using std::cin;
using std::cout;

int main() {
    std::vector<std::vector<int>> matrix, result;
    int N, T, i, j, t, element;
    cin >> N >> T;
    std::vector<int> line;
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            cin >> element;
            line.push_back(element);
        }
        matrix.push_back(line);
        line.clear();
    }
    result = matrix;
    for (t = 0; t < T; t++) {
        for (i = 0; i < N; i++) {
            for (j = 0; j < N; j++) {
                if (matrix.at(i).at(j) == 0) {
                    if (i == 0) {
                        if (j == 0) {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i + 1).at(j + 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        } else if (j == N - 1) {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i + 1).at(j - 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        } else {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i + 1).at(j + 1) +
                                matrix.at(i + 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        }
                    } else if (i == N - 1) {
                        if (j == 0) {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i - 1).at(j + 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        } else if (j == N - 1) {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i - 1).at(j - 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        } else {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i - 1).at(j + 1) +
                                matrix.at(i - 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) == 3) {
                                result.at(i).at(j) = 1;
                            }
                        }
                    } else if (j == 0) {
                        if (matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j + 1) +
                            matrix.at(i + 1).at(j + 1) == 3) {
                            result.at(i).at(j) = 1;
                        }
                    } else if (j == N - 1) {
                        if (matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i - 1).at(j - 1) == 3) {
                            result.at(i).at(j) = 1;
                        }
                    } else {
                        if (matrix.at(i + 1).at(j + 1) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j - 1) +
                            matrix.at(i - 1).at(j) +
                            matrix.at(i - 1).at(j + 1) == 3) {
                            result.at(i).at(j) = 1;
                        }
                    }
                } else {
                    if (i == 0) {
                        if (j == 0) {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i + 1).at(j + 1) < 2 ||
                                matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i + 1).at(j + 1) > 3) {
                                result.at(i).at(j) = 0;
                            }
                        } else if (j == N - 1) {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i + 1).at(j - 1) < 2 ||
                                matrix.at(i + 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i + 1).at(j - 1) > 3) {
                                result.at(i).at(j) = 0;
                            }
                        } else {
                            if (matrix.at(i + 1).at(j) +
                                matrix.at(i + 1).at(j + 1) +
                                matrix.at(i + 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) < 2 ||
                                matrix.at(i + 1).at(j) +
                                matrix.at(i + 1).at(j + 1) +
                                matrix.at(i + 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) > 3) {
                                result.at(i).at(j) = 0;
                            }
                        }
                    } else if (i == N - 1) {
                        if (j == 0) {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i - 1).at(j + 1) < 2 ||
                                matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i - 1).at(j + 1) > 3) {
                                result.at(i).at(j) = 0;
                            }
                        } else if (j == N - 1) {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i - 1).at(j - 1) > 2 ||
                                matrix.at(i - 1).at(j) +
                                matrix.at(i).at(j - 1) +
                                matrix.at(i - 1).at(j - 1) < 3) {
                                result.at(i).at(j) = 0;
                            }
                        } else {
                            if (matrix.at(i - 1).at(j) +
                                matrix.at(i - 1).at(j + 1) +
                                matrix.at(i - 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) < 2 ||
                                matrix.at(i - 1).at(j) +
                                matrix.at(i - 1).at(j + 1) +
                                matrix.at(i - 1).at(j - 1) +
                                matrix.at(i).at(j + 1) +
                                matrix.at(i).at(j - 1) > 3) {
                                result.at(i).at(j) = 0;
                            }
                        }
                    } else if (j == 0) {
                        if (matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j + 1) +
                            matrix.at(i + 1).at(j + 1) < 2 ||
                            matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j + 1) +
                            matrix.at(i + 1).at(j + 1) > 3) {
                            result.at(i).at(j) = 0;
                        }
                    } else if (j == N - 1) {
                        if (matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i - 1).at(j - 1) < 2 ||
                            matrix.at(i - 1).at(j) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i - 1).at(j - 1) > 3) {
                            result.at(i).at(j) = 0;
                        }
                    } else {
                        if (matrix.at(i + 1).at(j + 1) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j - 1) +
                            matrix.at(i - 1).at(j) +
                            matrix.at(i - 1).at(j + 1) < 2 ||
                            matrix.at(i + 1).at(j + 1) +
                            matrix.at(i + 1).at(j) +
                            matrix.at(i + 1).at(j - 1) +
                            matrix.at(i).at(j - 1) +
                            matrix.at(i).at(j + 1) +
                            matrix.at(i - 1).at(j - 1) +
                            matrix.at(i - 1).at(j) +
                            matrix.at(i - 1).at(j + 1) > 3) {
                            result.at(i).at(j) = 0;
                        }
                    }
                }
            }
        }
    matrix = result;
    }
    for (i = 0; i < N; i++) {
        for (j = 0; j < N - 1; j++) {
            cout << matrix.at(i).at(j) << ' ';
        }
        cout << matrix.at(i).at(j) << "\n";
    }
}