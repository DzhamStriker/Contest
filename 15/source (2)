template <typename F>
class IntegrationMethod {
public:
    virtual double Integrate(F func, double a, double b, int n) {}
};

template <typename F>
class RectangleRule : public IntegrationMethod<F> {
public:
    double Integrate(F func, double a, double b, int n) {
        double result;
        double x1;
        double x2 = a;
        for (int i = 0; i < n; i++) {
            x1 = x2;
            x2 = a + ((b - a) / n) * (i + 1);
            result += func((x1 + x2) / 2) * (x2 - x1);
        }
        return result;
    }
};

template <typename F>
class TrapezoidalRule : public IntegrationMethod<F> {
public:
    double Integrate(F func, double a, double b, int n) {
        double result;
        double x1;
        double x2 = a;
        for (int i = 0; i < n; i++) {
            x1 = x2;
            x2 = a + ((b - a) / n) * (i + 1);
            result += ((func(x1) + func(x2)) / 2) * (x2 - x1);
        }
        return result;
    }
};